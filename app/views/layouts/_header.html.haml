-#   Copyright (c) 2010-2011, Diaspora Inc.  This file is
-#   licensed under the Affero General Public License version 3 or later.  See
-#   the COPYRIGHT file.

.container{:style => "position:relative;"}
  - if current_user
    = link_to image_tag('logo_small.png', :height => "16px", :width => "161px", :class => "diaspora_header_logo"), multi_path
  - else
    = link_to image_tag('logo_large.png', :height => "32px", :width => "321px", :class => "diaspora_header_logo"), root_path

  - if !current_user
    .right
      %ul#landing_nav
        %li= link_to 'github', "https://github.com/fermionic/diaspora"
        %li= link_to t('.login'), new_user_session_path, :class => 'login'

  - elsif (current_user || !@landing_page)
    #global_search
      = form_tag(people_path, :method => 'get', :class => "search_form") do
        = text_field_tag 'q', params[:q], :placeholder => t('find_people'), :type => 'search', :results => 5

    #nav_badges
      #home_badge.badge
        = link_to multi_path, :title => t('_home') do
          = image_tag 'icons/home_grey.png', :alt => t('_home')

      #notification_badge.badge
        = link_to notifications_path, :title => new_notification_text(@notification_count) do
          = image_tag 'icons/notifications_grey.png', :id => "notification-flag", :alt => new_notification_text(@notification_count)
          .badge_count{:class => ("hidden" if @notification_count == 0)}
            = @notification_count

      #message_inbox_badge.badge
        = link_to conversations_path, :title => new_message_text(@unread_message_count) do
          = image_tag 'icons/mail_grey.png', :alt => new_message_text(@unread_message_count)
          .badge_count{:class => ("hidden" if @unread_message_count == 0)}
            = @unread_message_count

      #chat_badge.badge
        = link_to chat_messages_path do
          = image_tag 'icons/chat_grey.png'
          .badge_count{:class => ("hidden" if @chat_messages_unread.values.flatten.size == 0 || ! current_user.receiving_chat? )}
            = @chat_messages_unread.values.flatten.size

    #notification_dropdown
      .header
        .right
          = link_to t('notifications.index.mark_all_as_read'), read_all_notifications_path
          \|
          = link_to t('.view_all'), notifications_path, :id => "view_all_notifications"
        %h4
          = t('.unread_notifications')
      .notifications
        .ajax_loader
          = image_tag("ajax-loader.gif")

    #chat_dropdown
      .chat_status
        = t('.status')
        %br
        = select_tag( 'chat_status',  options_for_select( ['online', 'away', 'dnd', 'offline',].map { |s| [ t("chat.status.#{s}"), s, ] }, current_user.chat_status ) )
      .incoming
        .partners
          - @chat_partners.each_with_index do |partner,i|
            = render :partial => 'chat_messages/partner', :locals => { :partner => partner, :num_unread => @chat_messages_unread[partner].size, :first => i == 0, :contact_status => @chat_statuses[partner] }
        %h4.partner-current
          - if @chat_partners.any?
            = @chat_partners[0].name
            - if @chat_statuses[0]
              = ' (' + @chat_statuses[0] + ')'
        .conversations
          - @chat_partners.each_with_index do |partner,i|
            = render :partial => 'chat_messages/conversation', :locals => { :partner => partner, :messages => @chat_messages_read[partner] + @chat_messages_unread[partner], :first => i == 0, }
      .outgoing
        = text_area_tag 'chat-text', '', :rows => 3, :id => 'chat-text'

    #hovercard_container
      #hovercard
        %table
          %tr
            %td
              %img.avatar
            %td
              %h4
                %a.person
              %p.handle
              #hovercard_dropdown_container
          %tr
            .hovercard_footer
              .footer_container
                .hashtags

    %ul#user_menu.dropdown
      %li
        .right
          &#9660;
        .avatar
          = owner_image_tag(:thumb_small)
        = link_to current_user.name, '#', :title => current_user.diaspora_handle
      %li= link_to t('.profile'), local_or_remote_person_path(current_user.person)
      %li= link_to t('_contacts'), contacts_link
      %li= link_to t('.groups'), groups_path
      %li= link_to t('.settings'), edit_user_path
      -if current_user.admin?
        %li= link_to t('.admin'), user_search_path
      %li= link_to t('.logout'), destroy_user_session_path

  #lightbox
    #lightbox-content
      = link_to "[x] close", '#', :id => 'lightbox-close-link'
      %img#lightbox-image
      #lightbox-imageset

  #lightbox-backdrop

